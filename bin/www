#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('youtubeRemote:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

var roomCount = [];

var io = require( 'socket.io' )( server );
io.on( 'connection', function( socket){
  var id;
  console.log('new user connected');

  socket.on( 'register', function(data){
    id = data;
    socket.join(id);
    console.log("join room");
    if( !roomCount[id]){ //create room
      // socket.join(id);
      roomCount[id] = 1;
      console.log("1st room");
      io.to(id).emit( 'getNum', 1);
    }else{
      roomCount[id] = 2;
      console.log("2nd join");
      io.to(id).emit( 'getNum', 2);
    }

  })

  // click event
  socket.on('clickEvent', function(data, player, num, win){
    console.log("click event");
    console.log(win);
    io.to(id).emit('update', data, player, num, win);
  })

  // synBombs
  socket.on('synBombs', function(bombs){
    console.log("synBombs");
    io.to(id).emit('synBombs', bombs);
  })

  // newGame
  socket.on('newGame', function(bombs){
    console.log("newGame");
    io.to(id).emit('newGame', bombs);
  })

  // bangbang
  socket.on('bangbang',function(){
    io.to(id).emit('bangbang');
  })

  socket.on('bubububu',function(){
    io.to(id).emit('bubububu');
  })

  // disconnect
  socket.on( 'disconnect', function(){
    console.log( 'user disconnected');
  })

});
